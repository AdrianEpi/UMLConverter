
ABC <|-- AST
class AST {
    + PythonNode tree
    + list dataList
    - __init__(self)
    + getDataList(self)
    + getTree(self)
    + setDataList(self, l: list)
    + setTree(self, t: PythonNode)
    + generateTree(self, l: list)
    - __generateModule(self, pos: int)
    - __generateClassDef(self, pos: int)
    - __generateImport(self, pos: int)
    - __generateImportFrom(self, pos: int)
    - __generateAssign(self, pos: int)
    - __generateAnnAssign(self, pos: int)
    - __generateAsyncFunctionDef(self, pos: int)
    - __generateFunctionDef(self, pos: int)
    # _generateNode(self, pos: int, ntype: str)
    + printTree(self)
}

class Line {
    + int indentation
    + str data
    + int indentationLevel
    + list args
    - __init__(self, line: str)
    + getIndentation(self)
    + getData(self)
    + getRawData(self)
    + getIndentationLevel(self)
    - __generateLine(self, line: str)
}

AST <|-- PyAST
class PyAST {
    + generateTree(self, l: list)
    # _AST__generateModule(self, pos: int)
    # _AST__generateClassDef(self, pos: int)
    # _AST__generateImport(self, pos: int)
    # _AST__generateImportFrom(self, pos: int)
    # _AST__generateAssign(self, pos: int)
    - __generateFunctionCall(self, pos: int)
    - __generateAttribute(self, pos: int)
    # _AST__generateAnnAssign(self, pos: int)
    # _AST__generateAsyncFunctionDef(self, pos: int)
    # _AST__generateFunctionDef(self, pos: int)
    - __findName(self, pos: int)
    - __findValue(self, pos: int)
    - __findBodyPos(self, pos: int)
    - __findReturn(self, pos: int)
    - __findNextIndentPos(self, pos: int)
    - __getBoolOp(self, pos: int)
}

class PythonNode {
    + str nodeType
    + [str or None] name
    + [str or int or list or None] value
    + [list or None] args
    + [list or None] body
    - __init__(self)
    + getNodeType(self)
    + getName(self)
    + getValue(self)
    + getArgs(self)
    + getBody(self)
    + setNodeType(self, newNodeType: str)
    + setName(self, newName: str)
    + setValue(self, ['str', 'int'])
    + setArgs(self, newArgs: list)
    + setBody(self, newBody: list)
    + addArg(self, node)
    + addBody(self, node)
    + toString(self, indent)
}

class File {
    + str fileName
    + str data
    - __init__(self, file: str)
    + getFileName(self)
    + getData(self)
    + setFileName(self, name: str)
    + setData(self, newData: str)
    + read(self)
    + write(self, data: str)
}

class Searcher {
    + fileList
    + list
    + dirList
    + list
    - __init__(self)
    + getFileList(self)
    + getDirList(self)
    + lookForFiles(self, directory: str, ext: str)
}

class Interface {
    - __init__(self)
    + greet(self)
    + porjectInformationInterface(self)
}

class Translator {
    + PythonNode ast
    + str code
    + list imports
    + list classList
    + str language
    - __init__(self, module: PythonNode, lang: str)
    + getAst(self)
    + getCode(self)
    + getImports(self)
    + getClassList(self)
    + getLanguage(self)
    + setAst(self, module: PythonNode)
    + setCode(self, newCode: str)
    + setImports(self, newImports: list)
    + setClassList(self, newClassList: list)
    + setLanguage(self, lang: str)
    + translate(self)
    - __translateClass(self, node: PythonNode)
    + getVisibility(self, line: str)
    - __translateInheritance(self, className: str, l: list)
    - __translateAttrib(self, node: PythonNode)
    - __translateFunction(self, node: PythonNode)
}

class UMLConverter {
    + list fileList
    + str code
    + str output
    + str language
    + str extension
    + list classList
    + list imports
    - __init__(self)
    + getFileList(self)
    + getCode(self)
    + getOutput(self)
    + getLanguage(self)
    + getExtension(self)
    + getClassList(self)
    + getImports(self)
    + setFileList(self, newFileList: list)
    + setCode(self, newCode: str)
    + setOutput(self, newOutput: str)
    + setLanguage(self, newLanguage: str)
    + setExtension(self, newExtension: str)
    + setClassList(self, newClassList: list)
    + setImports(self, newImports: list)
    - __generateExtention(self)
    - __askFiles(self)
    + run(self)
    + generateUML(self)
    - __addClasses(self, classes: list)
    - __addImports(self, imports: list, moduleClassList: list)
    - __generateDependences(self)
    - __getModuleName(self, filePath: str)
    + writeToFile(self)
    + convertToPng(self)
}

AST --> PythonNode #red;line.dashed
PyAST --> PythonNode #red;line.dashed
PyAST --> AST #red;line.dashed
Translator --> PythonNode #red;line.dashed
UMLConverter --> Translator #red;line.dashed
UMLConverter --> File #red;line.dashed
UMLConverter --> Searcher #red;line.dashed
UMLConverter --> Line #red;line.dashed
UMLConverter --> PyAST #red;line.dashed
UMLConverter --> Interface #red;line.dashed
